package org.ndx.codingame.ghostinthecell;

import static org.assertj.core.api.Assertions.assertThat;

import org.junit.Test;
import org.ndx.codingame.ghostinthecell.playground.Playfield;


public class InGameTest {
	// @PerfTest(invocations = INVOCATION_COUNT, threads = THREAD_COUNT) @Required(percentile99=PERCENTILE)
	@Test public void can_find_move_1488565879136() {
		final Playfield p = new PlayfieldBuilder().at(14)
		.i(0, 0, 0, 0)
		.f(0).t(1).d(6).t(2).d(6).t(3).d(1).t(4).d(1).t(5).d(1).t(6).d(1).t(7).d(7).t(8).d(7).t(9).d(3).t(10).d(3).t(11).d(4).t(12).d(4).t(13).d(1).t(14).d(1)
		.i(1, 1, 5, 3)
		.f(1).t(0).d(6).t(2).d(14).t(3).d(5).t(4).d(8).t(5).d(4).t(6).d(9).t(7).d(3).t(8).d(14).t(9).d(2).t(10).d(11).t(11).d(3).t(12).d(11).t(13).d(6).t(14).d(7)
		.i(2, -1, 6, 3)
		.f(2).t(0).d(6).t(1).d(14).t(3).d(8).t(4).d(5).t(5).d(9).t(6).d(4).t(7).d(14).t(8).d(3).t(9).d(11).t(10).d(2).t(11).d(11).t(12).d(3).t(13).d(7).t(14).d(6)
		.i(3, -1, 3, 3)
		.f(3).t(0).d(1).t(1).d(5).t(2).d(8).t(4).d(4).t(5).d(2).t(6).d(3).t(7).d(7).t(8).d(8).t(9).d(2).t(10).d(6).t(11).d(4).t(12).d(5).t(13).d(4).t(14).d(1)
		.i(4, 1, 19, 3)
		.f(4).t(0).d(1).t(1).d(8).t(2).d(5).t(3).d(4).t(5).d(3).t(6).d(2).t(7).d(8).t(8).d(7).t(9).d(6).t(10).d(2).t(11).d(5).t(12).d(4).t(13).d(1).t(14).d(4)
		.i(5, 0, 0, 0)
		.f(5).t(0).d(1).t(1).d(4).t(2).d(9).t(3).d(2).t(4).d(3).t(6).d(4).t(7).d(4).t(8).d(10).t(9).d(1).t(10).d(6).t(11).d(1).t(12).d(6).t(13).d(1).t(14).d(4)
		.i(6, 0, 0, 0)
		.f(6).t(0).d(1).t(1).d(9).t(2).d(4).t(3).d(3).t(4).d(2).t(5).d(4).t(7).d(10).t(8).d(4).t(9).d(6).t(10).d(1).t(11).d(6).t(12).d(1).t(13).d(4).t(14).d(1)
		.i(7, 1, 8, 1)
		.f(7).t(0).d(7).t(1).d(3).t(2).d(14).t(3).d(7).t(4).d(8).t(5).d(4).t(6).d(10).t(8).d(15).t(9).d(3).t(10).d(11).t(11).d(2).t(12).d(12).t(13).d(6).t(14).d(9)
		.i(8, -1, 3, 1)
		.f(8).t(0).d(7).t(1).d(14).t(2).d(3).t(3).d(8).t(4).d(7).t(5).d(10).t(6).d(4).t(7).d(15).t(9).d(11).t(10).d(3).t(11).d(12).t(12).d(2).t(13).d(9).t(14).d(6)
		.i(9, 1, 3, 3)
		.f(9).t(0).d(3).t(1).d(2).t(2).d(11).t(3).d(2).t(4).d(6).t(5).d(1).t(6).d(6).t(7).d(3).t(8).d(11).t(10).d(8).t(11).d(1).t(12).d(8).t(13).d(4).t(14).d(5)
		.i(10, 1, 0, 2)
		.f(10).t(0).d(3).t(1).d(11).t(2).d(2).t(3).d(6).t(4).d(2).t(5).d(6).t(6).d(1).t(7).d(11).t(8).d(3).t(9).d(8).t(11).d(8).t(12).d(1).t(13).d(5).t(14).d(4)
		.i(11, 1, 12, 2)
		.f(11).t(0).d(4).t(1).d(3).t(2).d(11).t(3).d(4).t(4).d(5).t(5).d(1).t(6).d(6).t(7).d(2).t(8).d(12).t(9).d(1).t(10).d(8).t(12).d(9).t(13).d(2).t(14).d(6)
		.i(12, -1, 4, 2)
		.f(12).t(0).d(4).t(1).d(11).t(2).d(3).t(3).d(5).t(4).d(4).t(5).d(6).t(6).d(1).t(7).d(12).t(8).d(2).t(9).d(8).t(10).d(1).t(11).d(9).t(13).d(6).t(14).d(2)
		.i(13, 1, 13, 3)
		.f(13).t(0).d(1).t(1).d(6).t(2).d(7).t(3).d(4).t(4).d(1).t(5).d(1).t(6).d(4).t(7).d(6).t(8).d(9).t(9).d(4).t(10).d(5).t(11).d(2).t(12).d(6).t(14).d(4)
		.i(14, -1, 10, 3)
		.f(14).t(0).d(1).t(1).d(7).t(2).d(6).t(3).d(1).t(4).d(4).t(5).d(4).t(6).d(1).t(7).d(9).t(8).d(6).t(9).d(5).t(10).d(4).t(11).d(6).t(12).d(2).t(13).d(4).b(1, 2, 1)				.t(1,3,1,9,5)
		.t(1,4,1,3,2)
		.t(1,4,1,3,3)
		.t(1,7,1,1,1)
		.t(1,7,1,2,2)
.b(1, 10, 1)				.t(2,3,-1,3,3)
		.t(2,3,-1,3,4)
		.t(2,3,-1,3,6)
		.t(2,4,-1,3,2)
		.t(2,10,-1,3,1)
		.t(8,3,-1,2,6)
		.t(3,9,-1,7,2)
		.t(10,3,-1,2,4)
		.t(12,3,-1,2,3)
		.t(7,4,1,5,3)
		.t(9,4,1,4,1)
		.t(12,4,-1,2,1)
		.t(14,4,-1,10,4)
		.t(11,7,1,1,1)
		.t(13,7,1,1,3)
		.t(13,7,1,1,4)
		.t(8,9,-1,2,7)
		.t(8,11,-1,1,3)
		.t(14,10,-1,12,3)
.e(2);
		assertThat(p.compute()).isNotNull();
	}
}
